class working3(Scene):
    def construct(self):
        # self.add(NumberPlane().set_z_index(1))


        set_1 = Circle(radius=2, color=RED_B, fill_opacity=0.5, fill_color=RED_B).shift(U * 1.732)
        set_1_label = MathTex('A').next_to(set_1, U)
        set_1.add(set_1_label)

        set_2 = Circle(radius=2, color=GREEN_B, fill_opacity=0.5, fill_color=GREEN_B).shift(L * 1)
        set_2_label = MathTex('B').next_to(set_2.get_center() + L * 1.414 + D * 1.414, DL)
        set_2.add(set_2_label)

        set_3 = Circle(radius=2, color=BLUE_B, fill_opacity=0.5, fill_color=BLUE_B).shift(R * 1)
        set_3_label = MathTex('C').next_to(set_3.get_center() + R * 1.414 + D * 1.414, DR)
        set_3.add(set_3_label)

        sets = VGroup(set_1, set_2, set_3).move_to(ORIGIN)

        self.play(DrawBorderThenFill(sets))

        self.play(sets.animate.to_edge(L, buff=1))

        a_intersection_b_form = MathTex(r'A\cap B=').shift(R * 1)

        a_intersection_b_shape = Intersection(set_1, set_2, fill_color=YELLOW_D, fill_opacity=0.8)

        self.play(Create(a_intersection_b_form))
        self.play(Create(a_intersection_b_shape))
        self.play(a_intersection_b_shape.animate.rotate(-PI / 3).scale_to_fit_height(0.7).next_to(a_intersection_b_form, R))

        a_intersection_b = VGroup(a_intersection_b_form, a_intersection_b_shape)
        self.play(a_intersection_b.animate.to_edge(UR, buff=1))

        a_difference_b_form = MathTex(r'A-B=').shift(R * 1)

        a_difference_b_shape = Difference(set_1, set_2, fill_color=RED_D, fill_opacity=0.8)

        self.play(Create(a_difference_b_form))
        self.play(Create(a_difference_b_shape))
        self.play(a_difference_b_shape.animate.rotate(-PI / 3).scale_to_fit_height(0.7).next_to(a_difference_b_form, R))

        a_difference_b = VGroup(a_difference_b_form, a_difference_b_shape)
        self.play(a_difference_b.animate.next_to(a_intersection_b, D, buff=0.5, aligned_edge=L))

        a_union_b_inter_c_form = MathTex(r'A\cup B\cap C=').shift(R * 1)

        a_union_b_inter_c_shape = Intersection(Union(set_1, set_2), set_3, fill_color=PURPLE_D, fill_opacity=0.8)
        self.play(Create(a_union_b_inter_c_form))
        self.play(Create(a_union_b_inter_c_shape))
        self.play(a_union_b_inter_c_shape.animate.rotate(PI / 3).scale_to_fit_height(0.7).next_to(a_union_b_inter_c_form, R))

        a_union_b_inter_c = VGroup(a_union_b_inter_c_form, a_union_b_inter_c_shape)
        self.play(a_union_b_inter_c.animate.next_to(a_difference_b, D, buff=0.5, aligned_edge=L))

        self.wait(5)


class working2(MovingCameraScene):
    def construct(self):
        # self.add(NumberPlane().set_z_index(1))

        speak(self, title='Scene2', txt=
        '중앙화 거래소가 어떻게 작동하는지 예를 보겠습니다. 우리가 관심있는 건 크립토니까 일반적인 크립토 거래소를 기준으로 설명하겠습니다#1'

        '에이는 비트코인을 가지고 있습니다#1'
        '비는 현금을 가지고 있습니다#1'
        '에이는 비트코인을 현금으로 바꾸고 싶고, 비는 현금으로 비트코인을 구매하고 싶습니다#1'

        '그리하여 에이와 비는 거래소로 자신의 자산인 비트코인과 현금을 각각 입금합니다#1'
        '거래소는 현금을 받기위해 시중은행 계좌나 결제시스템을 통하고 입금을 확인한 뒤 자신의 데이터베이스에 기록합니다#1'
        '거래소 데이터베이스에 비의 현금 보유액이 업데이트 됐습니다#1'
        '그리고 비트코인을 입금받기 위해서는 에이에게서 비트코인을 받기위한 주소를 에이에게 알려주고 에이가 블록체인을 통해서 그 주소로 비트코인을 전송하면 확인한 뒤 거래소의 데이터베이스에 기록합니다#1'
        '거래소 데이터 베이스에 에이의 비트코인 보유액이 업데이트 됐습니다#1'
              , keep_pitch=True, update=False, speed=1.4)

        # TODO 8.444 secs중앙화 거래소가 어떻게 작동하는지 예를 보겠습니다.
        #  우리가 관심있는 건 크립토니까 일반적인 크립토 거래소를 기준으로 설명하겠습니다
        # TODO 0:00:00.000  ~  0:00:08.444
        # TODO 1.0secs pause
        # TODO 0:00:08.444  ~  0:00:09.444

        cent_ex_text = Tex('Centralized Exchange').scale(2)
        crypto_text = Tex('Crypto').scale(2)

        self.play(Create(cent_ex_text))
        self.wait(3)

        self.play(cent_ex_text.animate.shift(D * 0.5))
        crypto_text.next_to(cent_ex_text, U)
        self.play(Create(crypto_text))

        self.wait(2)
        self.play(Unwrite(VGroup(crypto_text, cent_ex_text)), run_time=1)
        self.wait(0.444)

        # TODO 2.127 secs에이는 비트코인을 가지고 있습니다
        # TODO 0:00:09.444  ~  0:00:11.571
        # TODO 1.0secs pause
        # TODO 0:00:11.571  ~  0:00:12.571
        A = create_entity("A", 0.5, WHITE, "1 BTC", C_BTC, 0.7, 0.3, asset_text_color=WHITE).shift(RIGHT * 4 + UP * 1)
        self.play(Create(A), run_time=2)
        self.wait(1.127)

        # TODO 1.861 secs비는 현금을 가지고 있습니다
        # TODO 0:00:12.571  ~  0:00:14.432
        # TODO 1.0secs pause
        # TODO 0:00:14.432  ~  0:00:15.432

        B = create_entity("B", 0.5, WHITE, "100 $", C1275, 0.7, 0.3, asset_text_color=WHITE).shift(RIGHT * 4 + DOWN * 1)
        self.play(Create(B), run_time=2)
        self.wait(1.861)

        A_asset_btc = A[ 1 ]
        B_asset_usd = B[ 1 ]

        A_asset_btc.set_z_index(3)
        B_asset_usd.set_z_index(3)

        A_asset_pos = A_asset_btc.get_center()
        B_asset_pos = B_asset_usd.get_center()

        # TODO 5.605 secs에이는 비트코인을 현금으로 바꾸고 싶고, 비는 현금으로 비트코인을 구매하고 싶습니다
        # TODO 0:00:15.432  ~  0:00:21.037
        # TODO 1.0secs pause
        # TODO 0:00:21.037  ~  0:00:22.037

        A_spch = Text("I want USD").next_to(A, LEFT).scale(0.6)
        B_spch = Text("I want BTC").next_to(B, LEFT).scale(0.6)

        self.play(AnimationGroup(Write(A_spch),
                                 Write(B_spch),
                                 lag_ratio=1,
                                 run_time=2))

        self.wait(2.605)

        self.play(AnimationGroup(Unwrite(A_spch),
                                 Unwrite(B_spch),
                                 lag_ratio=1,
                                 run_time=2))

        # TODO 5.352 secs그리하여 에이와 비는 거래소로 자신의 자산인 비트코인과 현금을 각각 입금합니다
        # TODO 0:00:22.037  ~  0:00:27.389
        # TODO 1.0secs pause
        # TODO 0:00:27.389  ~  0:00:28.389

        ex_rect = RoundedRectangle(corner_radius=0.5, height=8, width=6)
        ex_rect_text = Tex("Exchange").next_to(ex_rect, UP, buff=0.2).scale(0.8)
        ex = VGroup(ex_rect, ex_rect_text).move_to(ORIGIN).to_edge(LEFT)

        ex_server_rect = RoundedRectangle(width=1.2, height=0.5, corner_radius=0.1)
        ex_server_led_1 = Dot(radius=0.05, fill_color=GREEN).shift(RIGHT * 0.2)
        ex_server_led_2 = Dot(radius=0.05, fill_color=GREEN).shift(RIGHT * 0.4)

        ex_server = VGroup(ex_server_rect, ex_server_led_1, ex_server_led_2).next_to(ex_rect, UP, aligned_edge=UP, buff=-0.5).shift(
            LEFT * 1.5)

        self.play(Create(ex), run_time=0.5)
        # self.wait(0.5)

        self.play(Create(ex_server), run_time=0.5)
        # self.wait(0.5)

        ex_ledger = MathTable(
            [ [ "Ex", r"a " ],
              [ "A", r"aaaaaa " ],
              [ "B", r"a " ] ],
            include_outer_lines=True).scale(0.4).next_to(ex_server, RIGHT).align_to(ex_server, UP).shift(RIGHT)

        # self.add(index_labels(ex_ledger))

        ex_ledger[ 0 ][ 5 ].set_color(BLACK)
        ex_ledger[ 0 ][ 1 ].set_color(BLACK)
        ex_ledger[ 0 ][ 3 ].set_color(BLACK)
        ex_ex_ledger = ex_ledger[ 0 ][ 1 ]
        A_ex_ledger = ex_ledger[ 0 ][ 3 ]
        B_ex_ledger = ex_ledger[ 0 ][ 5 ]

        self.play(Create(ex_ledger), run_time=0.5)

        A_wallet_rect = RoundedRectangle(0.1, width=1, height=1)
        A_wallet_text = Tex(r"A wallet").next_to(A_wallet_rect, UP, buff=0.2).scale(0.6)
        A_wallet = VGroup(A_wallet_rect, A_wallet_text)

        B_wallet_rect = RoundedRectangle(0.1, width=1, height=1)
        B_wallet_text = Tex("B wallet").next_to(B_wallet_rect, UP, buff=0.2).scale(0.6)
        B_wallet = VGroup(B_wallet_rect, B_wallet_text)

        ex_wallet_rect = RoundedRectangle(0.1, width=1, height=1)
        ex_wallet_text = Tex("ex wallet").next_to(ex_wallet_rect, UP, buff=0.2).scale(0.6)
        ex_wallet = VGroup(ex_wallet_rect, ex_wallet_text)

        wallets = VGroup(ex_wallet, A_wallet, B_wallet).arrange(DOWN).next_to(ex_rect, RIGHT, aligned_edge=RIGHT, buff=-1).shift(DOWN)

        self.play(Create(wallets), run_time=0.5)

        # self.play(A_asset_btc.animate.move_to(A_wallet_rect),
        #           B_asset_usd.animate.move_to(B_wallet_rect), rate_func=there_and_back)

        # wallet_expl = Text("Wallet means a group of wallets and bank account. it is better to say it is an account")

        bank_rect = RoundedRectangle(corner_radius=0.2, height=1.8, width=4)
        bank_rect_text = Tex("Bank").next_to(bank_rect, UP, buff=0.1).scale(0.5)
        bank_server = ex_server.copy().next_to(bank_rect, UP, aligned_edge=UP, buff=-0.5).shift(LEFT)
        bank = VGroup(bank_rect, bank_rect_text, bank_server).to_edge(UP).shift(RIGHT)

        # B_bank_bal_tracker = ValueTracker(0)

        bank_ledger = MathTable(
            [ [ "Ex", r"a " ],
              [ "A", r"aaaaaa " ],
              [ "B", r"a " ] ],
            include_outer_lines=True).scale(0.4).next_to(bank_server, RIGHT).align_to(bank_server, UP)

        # self.add(index_labels(bank_ledger[ 0 ]))
        # position = bank_ledger[0][5].get_center()
        # print(type(bank_ledger[0][5]))
        # bank_ledger[0][5].add_updater(lambda x: Integer(number = B_bank_bal_tracker.get_value()).move_to(position))
        # new_num.number = 65
        # num = Integer(50).move_to(bank_ledger[ 0 ][ 5 ])
        bank_ledger[ 0 ][ 5 ].set_color(BLACK)
        bank_ledger[ 0 ][ 1 ].set_color(BLACK)
        bank_ledger[ 0 ][ 3 ].set_color(BLACK)

        ex_bank_ledger = bank_ledger[ 0 ][ 1 ]
        A_bank_ledger = bank_ledger[ 0 ][ 3 ]
        B_bank_ledger = bank_ledger[ 0 ][ 5 ]

        # self.play(B_bank_bal_tracker.animate.set_value(35))

        self.play(Create(bank), run_time=0.5)
        self.play(Create(bank_ledger), run_time=0.5)

        self.wait(3.352)

        # TODO 7.345 secs거래소는 현금을 받기위해 시중은행 계좌나 결제시스템을 통하고 입금을 확인한 뒤 자신의 데이터베이스에 기록합니다
        # TODO 0:00:28.389  ~  0:00:35.734
        # TODO 1.0secs pause
        # TODO 0:00:35.734  ~  0:00:36.734

        B_100usd_bank = create_entity("B", 0.5, GRAY, "100 $", WHITE, 0.7, 0.3)[ 1 ].move_to(B_bank_ledger)
        B_100usd_ex = create_entity("B", 0.5, WHITE, "100 $", WHITE, 0.7, 0.3)[ 1 ].move_to(B_ex_ledger)

        self.play(B_asset_usd.animate.next_to(bank_server, DOWN), run_time=2)
        self.wait(1)
        self.play(FadeIn(B_100usd_bank, target_position=bank_server, scale=0.2), run_time=2)
        self.wait(1)
        self.play(B_100usd_bank.animate.move_to(ex_bank_ledger), run_time=1.5)
        self.play(FadeIn(B_100usd_ex, target_position=ex_server, scale=0.2), run_time=1.5)

        self.wait(0.345)

        # TODO 3.806 secs거래소 데이터베이스에 비의 현금 보유액이 업데이트 됐습니다
        # TODO 0:00:36.734  ~  0:00:40.540
        # TODO 1.0secs pause
        # TODO 0:00:40.540  ~  0:00:41.540

        self.play(B_100usd_ex.animate.move_to(B_ex_ledger), run_time=3)
        self.wait(1.806)

        # TODO 11.9 secs그리고 비트코인을 입금받기 위해서는 에이에게서 비트코인을 받기위한 주소를 에이에게 알려주고 에이가 블록체인을 통해서 그 주소로 비트코인을 전송하면 확인한 뒤 거래소의 데이터베이스에 기록합니다
        # TODO 0:00:41.540  ~  0:00:53.440
        # TODO 1.0secs pause
        # TODO 0:00:53.440  ~  0:00:54.440

        btc_addr = Tex(r'BTC Address\\n2kQ5L2rdc5rspJvU\\VrN28fejZYhqakFPx').scale(0.7).move_to(ex_rect).shift(L * 0.6)
        self.play(Create(btc_addr), run_time=2.5)
        self.wait(1)

        self.play(FadeOut(btc_addr, target_position=A[ 0 ]), run_time=2)
        self.wait(1)

        chain_elipse = RoundedRectangle(height=0.2, width=0.4, corner_radius=0.1)
        chain_line = Line(ORIGIN, L * 0.4)
        chain = VGroup()
        for i in range(1):
            chain.add(chain_line.copy())
            chain.add(chain_elipse.copy())
        chain.add(chain_line.copy())
        chain.arrange(R, buff=-0.12).rotate(PI / 2)

        blocks = VGroup()
        for i in range(5):
            blocks.add(Square(1.2, fill_color=BLACK, fill_opacity=1, stroke_color=WHITE))

        blocks.arrange(D, buff=chain.height).to_edge(R)

        block_nums = VGroup()

        for i in range(len(blocks)):
            block_nums.add(Tex(f"{format(i, '04b')}").move_to(blocks[ i ]).scale(0.6))

        blockchain = VGroup()

        for i in range(len(blocks)):
            blockchain.add(blocks[ i ])
            blockchain.add(block_nums[ i ])
            blockchain.add(chain.copy().next_to(blocks[ i ], D, buff=0))

        # blockchain_bar = DashedLine(start=blocks[ 0 ].get_top(), end=blocks[ 9 ].get_bottom(), dash_length=0.4, dashed_ratio=0.6,
        #                             stroke_color=WHITE).shift(LEFT)
        self.play(Create(blockchain), run_time=1)
        self.wait(0.4)

        self.play(A_asset_btc.animate.move_to(blocks[ 2 ]), run_time=2)
        self.wait(0.5)

        self.play(A_asset_btc.animate.move_to(A_wallet_rect), run_time=2)
        self.wait(0.5)

        # TODO 4.144 secs거래소 데이터 베이스에 에이의 비트코인 보유액이 업데이트 됐습니다
        # TODO 0:00:54.440  ~  0:00:58.584
        # TODO 1.0secs pause
        # TODO 0:00:58.584  ~  0:00:59.584

        A_1btc_ex = create_entity("B", 0.5, WHITE, "1 BTC", WHITE, 0.7, 0.3)[ 1 ].move_to(A_ex_ledger)
        self.play(FadeIn(A_1btc_ex, target_position=ex_server, scale=0.2), run_time=3)
        self.wait(2.144)

        self.wait(5)
